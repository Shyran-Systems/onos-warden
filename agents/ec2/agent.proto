// backend agent to warden
// - advertise cluster (ClusterAdvertisement)
//    - update on new reservations
// - withdraw cluster (ClusterAdvertisement)

// warden to backend agent
// - request cluster (ClusterRequest)
// - release cluster (ClusterRequest)
// - reset / kill / admin to node in cluster(clusterId, nodeId)

syntax = "proto3";

package warden;

message ClusterRequest {
	string requestId = 1;
	enum RequestType {
		RESERVE = 0;
		RETURN = 1;
		EXTEND = 2;
	}
	RequestType type = 2;
	int32 duration = 3; //minutes (-1 is indefinite)
	message Spec {
		uint32 controllerNodes = 1;
		string userName = 2;
		string userKey = 3;
	}
	Spec spec = 4;
}

message ClusterAdvertisement {
	string clusterId = 1;
	enum State {
	    AVAILABLE = 0;
	    RESERVED = 1;
	    UNAVAILABLE = 2;
  	}
  	State state = 2;
  	string requestId = 3;
  	string headNodeIP = 4;
  	message ClusterNode {
  		uint32 id = 1;
  		string ip = 2;
  	}
  	repeated ClusterNode nodes = 5;
}

service ClusterAgentService {
  rpc cluster (stream ClusterAdvertisement) returns (stream ClusterRequest) {}
}